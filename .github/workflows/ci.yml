name: GitHub CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'pyansys-tools-report'
  PACKAGE_NAMESPACE: 'ansys.tools.report'
  DOCUMENTATION_CNAME: 'report.tools.docs.pyansys.com'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  docs-style:
    name: PyAnsys documentation style check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build and smoke tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  smoke-tests-macos:
    name: Build and smoke tests (macOS)
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: Testing
    runs-on: [self-hosted, pyansys-trainings, "${{ matrix.os }}"]
    needs: [smoke-tests]
    strategy:
      fail-fast: false
      matrix:
          python-version: ['3.7', '3.8', '3.9', '3.10']
          os: ['Linux', 'Windows']
    steps:
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -y install libegl1

      - name: Run pytest
        uses: ansys/actions/tests-pytest@v4
        with:
          python-version: ${{ matrix.python-version }}
          pytest-extra-args: "--cov=${{ env.PACKAGE_NAMESPACE }} --cov-report=term --cov-report=xml:.cov/coverage.xml --cov-report=html:.cov/html"

      - name: Upload coverage results (HTML)
        uses: actions/upload-artifact@v3
        if: (matrix.python-version == env.MAIN_PYTHON_VERSION) && (runner.os == 'Linux')
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

      - name: Upload coverage results (Codecov)
        uses: codecov/codecov-action@v3
        if: (matrix.python-version == env.MAIN_PYTHON_VERSION) && (runner.os == 'Linux')
        with:
          files: .cov/coverage.xml

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          dependencies: "build-essential zip pandoc texlive-latex-extra latexmk texlive-pstricks"

  package:
    name: Package library
    needs: [tests, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
    needs: [package, smoke-tests-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the public PyPI repository
        uses: ansys/actions/release-pypi-public@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: Release to GitHub
        uses: ansys/actions/release-github@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  upload_docs_dev:
    name: Upload dev documentation
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_release:
    name: Upload release documentation
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
